import { cleanupEventHandlers } from '@/bridge/events/cleanupEventHandlers.js';
import { defineEventHandlers } from '@/bridge/events/defineEventHandlers.js';
import type { MiniAppsMessage } from '@/bridge/parseMessage.js';
import { parseMessage } from '@/bridge/parseMessage.js';
import { error, log } from '@/debug/debug.js';
import { EventEmitter } from '@/events/event-emitter/EventEmitter.js';
import { onWindow } from '@/events/onWindow.js';
import { compose } from '@/misc/compose.js';
import { string } from '@/parsing/parsers/string.js';
import type { CleanupFn } from '@/types/index.js';

import { clipboardTextReceived } from './parsers/clipboardTextReceived.js';
import { customMethodInvoked } from './parsers/customMethodInvoked.js';
import { invoiceClosed } from './parsers/invoiceClosed.js';
import { phoneRequested } from './parsers/phoneRequested.js';
import { popupClosed } from './parsers/popupClosed.js';
import { qrTextReceived } from './parsers/qrTextReceived.js';
import { themeChanged } from './parsers/theme-changed.js';
import { viewportChanged } from './parsers/viewportChanged.js';
import { writeAccessRequested } from './parsers/writeAccessRequested.js';
import type { MiniAppsEventEmitter } from './types/events.js';

/**
 * Returns event emitter which could be safely used, to process events from
 * Telegram native application.
 */
export function createEmitter(): [emitter: MiniAppsEventEmitter, cleanup: CleanupFn] {
  const emitter: MiniAppsEventEmitter = new EventEmitter();

  // This function is just a decorator to emitter's "emit" method which logs the emitted
  // event.
  const emit: MiniAppsEventEmitter['emit'] = (event: any, ...data: any[]) => {
    log('emittedEvent', 'Emitting processed event:', data.length
      ? { event, args: data }
      : { event });
    emitter.emit(event, ...data);
  };

  // Define global Mini Apps event handlers to make sure, we will be able to process them
  // locally.
  defineEventHandlers();

  const [addCleanup, cleanup] = compose();

  addCleanup(
    // Don't forget to remove them when they became unnecessary.
    cleanupEventHandlers,
    // Add "resize" event listener to make sure, we always have fresh viewport information.
    // Desktop version of Telegram is sometimes not sending the viewport_changed
    // event. For example, when the MainButton is shown. That's why we should
    // add our own listener to make sure, viewport information is always fresh.
    // Issue: https://github.com/Telegram-Mini-Apps/tma.js/issues/10
    onWindow('resize', () => emit('viewport_changed', {
      width: window.innerWidth,
      height: window.innerHeight,
      is_state_stable: true,
      is_expanded: true,
    })),
    // Add listener, which handles events sent from the Telegram web application and also events
    // generated by the local emitEvent function.
    onWindow('message', (event) => {
      if (event.source !== window.parent) {
        return;
      }

      let message: MiniAppsMessage;
      try {
        message = parseMessage(event.data);
      } catch {
        // We ignore incorrect messages as they could be generated by any other code.
        return;
      }
      log('rawEvent', 'Received raw event:', message);

      const {
        eventType,
        eventData = {},
      } = message;
      const createParser = {
        viewport_changed: viewportChanged,
        theme_changed: themeChanged,
        popup_closed: popupClosed,
        set_custom_style: string,
        qr_text_received: qrTextReceived,
        clipboard_text_received: clipboardTextReceived,
        invoice_closed: invoiceClosed,
        phone_requested: phoneRequested,
        custom_method_invoked: customMethodInvoked,
        write_access_requested: writeAccessRequested,
      }[eventType];
      try {
        emit(eventType as any, createParser ? createParser().parse(eventData) : eventData);
      } catch (cause) {
        error(
          null,
          'There was an error processing an event from the Telegram application. Please, file an issue here: https://github.com/Telegram-Mini-Apps/tma.js/issues/new/choose',
          message,
          cause,
        );
      }
    }),
  );

  return [emitter, cleanup];
}
